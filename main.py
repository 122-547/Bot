#–∏–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import sqlite3
import requests
import datetime
import validators



class MusicBot: #—Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞
    def __init__(self): #—Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∞
        logging.basicConfig(filename="bot.log", filemode="a", level=logging.INFO) #–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
        token = "7876319768:AAE0ywpZz1UHYFZoH4Ylv5UmPn1dacHiN2k" #—Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–π
        
        self.db = sqlite3.connect("database.db") #–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.cur = self.db.cursor() #—Å–æ–∑–¥–∞–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        try:
            self.cur.execute("create table users(username text, id text, m_count integer, b_status text)")
            self.cur.execute("create table tracks(name text, author text, v_count integer, url text)")
        except sqlite3.OperationalError:
            pass
        self.last_message = """ 
–£ –í–∞—Å –±–æ–ª—å—à–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ\. –í–∞—à–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º\.
        
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –¥–∏—Å–∫–æ—Ç–µ–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ –Ω–∞—à–µ–º [—Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ](https://t.me/discoterr)\.

\[ *–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –ª–∏—Ü–µ–π—Å–∫–æ–≥–æ –ø–∞—Ä–ª–∞–º–µ–Ω—Ç–∞ –∏ –≥–ª–∞–≤ –ª–∏—Ü–µ–π—Å–∫–∏—Ö –∫–æ–º–∏—Ç–µ—Ç–æ–≤* \]
        """
        
        self.info = """
–î–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø–∞—Ä–µ —Å —Å–µ—Ä–≤–∏—Å–æ–º *–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞*, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å–ª—ã—à–∞—Ç—å\.

–î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º —Å–ª–µ–¥—É–µ—Ç: _–ø–µ—Ä–µ–π—Ç–∏ –≤_ *–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫—É* \=\> _–Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–π –≤–∞–º —Ç—Ä–µ–∫_ \=\> _–Ω–∞–∂–∞—Ç—å –Ω–∞_ *‚ãÆ* \=\> *–ü–æ–¥–µ–ª–∏—Ç—å—Å—è* \=\> *–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É* \=\> _–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –±–æ—Ç—É_\.

–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:

‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ –¢–û–õ–¨–ö–û 3 —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–æ–º 3—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –æ–Ω –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –∫–∞–∫\-–ª–∏–±–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è, –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã\!

‚Ä¢ –ù–∞–º –Ω—É–∂–Ω—ã —Ç—Ä–µ–∫–∏ –±–µ–∑ –ø–æ—à–ª–æ—Å—Ç–µ–π, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –±–µ–∑ –º–∞—Ç–∞, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ —Ç—Ä–µ–∫–∏ –±—É–¥—É—Ç –ø–æ–¥–≤–µ—Ä–≥–∞—Ç—å—Å—è —Ü–µ–Ω–∑—É—Ä–µ\.

‚Ä¢ –õ–∏—á–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞\: 
> –ú–æ–ª—é, –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –ø–µ—Å–Ω–∏ nkeeei
        """
        

        self.start1 = """
–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ç—Ä–µ–∫–æ–≤ –Ω–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω—é—é –¥–∏—Å–∫–æ—Ç–µ–∫—É, —É—á–∏—Ç—ã–≤–∞—è –≤–∫—É—Å –∫–∞–∂–¥–æ–≥–æ –∏–∑ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö. 

–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ –≤—ã –ø–æ–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏—è—Ç–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏!

        """


        self.bot = Bot(token) #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ , parse_mode=ParseMode.HTML
        self.dp = Dispatcher(self.bot) #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –±–æ—Ç–∞
        self.dp.middleware.setup(LoggingMiddleware()) #–ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        
    def main_kb(self, message):
        kb_list = [[KeyboardButton(text="üìñ –î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìñ")]]
        keyboard = ReplyKeyboardMarkup(keyboard=kb_list, resize_keyboard=True, one_time_keyboard=True)
        return keyboard

    def start(self): #—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è—é—â–∏—è –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–æ–º –∫–æ–º–º–∞–¥–Ω—ã /start
        @self.dp.message_handler(commands=["start"])
        async def start1(message: types.Message):
            
            await self.send_start_message(message)

    def info_(self): #—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è—é—â–∏—è –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–æ–º –∫–æ–º–º–∞–¥–Ω—ã /help (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
        @self.dp.message_handler(commands=["help"])
        async def help1(message: types.Message):
            await self.send_help_message(message)

    def end(self): #—Ñ—É–Ω–∫—Ü–∏—è –æ–∫–æ–Ω—á–∞–Ω–∏—é << –∂–∏–∑–Ω–∏ >> –±–æ—Ç–∞
        from aiogram import executor
        executor.start_polling(self.dp)
        date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        with open("bot.log", "a") as file:
            file.write(f"[end] [{date}]\n\n")
        self.db.close()

    def get_message(self): #—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è—é—â–∏—è –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        @self.dp.message_handler(content_types="text")
        async def get_message1(message: types.Message):
            b_status = self.check_b_status(message) #–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤ –±–∞–Ω –ª–∏—Å—Ç–µ
            if not b_status: #–µ—Å–ª–∏ –Ω–µ –≤ –±–∞–Ω –ª–∏—Å—Ç–µ
                    if message.text == "üìñ –î–æ–ø. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è üìñ":
                        await self.send_info_message(message)
                    else:
                        is_new_user = self.is_new_user(message) #–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        if is_new_user: #–µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                            self.add_new_user(message) #–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        is_new_track = self.check_track_in_db(message) #–Ω–æ–≤—ã–π –ª–∏ —Ç—Ä–µ–∫
                        if is_new_track: #–µ—Å–ª–∏ –Ω–æ–≤—ã–π
                            e_status, data = self.message_processing(message) #–ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ
                            if e_status == "error":
                                if data != None:
                                    await data, self.send_m_count_message(message), self.add_m_count_user(message)
                            else:
                                self.add_new_track_in_db(data, message) #–¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç—Ä–µ–∫ –≤ –¥–±
                                await self.send_m_count_message(message), self.add_m_count_user(message)
                        else: #–µ—Å–ª–∏ –Ω–µ –Ω–æ–≤—ã–π
                            self.add_existing_track_in_db(message) #–¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç—Ä–µ–∫—É –≤ –¥–±
                            await self.send_m_count_message(message), self.add_m_count_user(message)

            
    def message_processing(self, message): #–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = message.text
        if validators.url(url) == True:
            parts = url.split('/')
            track_index = parts.index('track')
            track_id = parts[track_index + 1].split('?')[0]
            api_url = "https://api.music.yandex.net/tracks/" + track_id
            try:
                response = requests.get(api_url)
                if response.status_code == 200:
                    response_data = response.json()
                    name = response_data['result'][0]['title']
                    artists = response_data['result'][0]['artists']
                    authors = ''
                    for artist in artists:
                        name1 = artist['name']
                        authors = authors + name1 + ", "
                    author = authors[:-2]
                    data = {
                        "name": name,
                        "author": author
                        }
                    return "not-found", data
            except Exception as e:
                return "error", e
        else:
            return "error", message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –ª–∏–±–æ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π.")
        

    @staticmethod
    def start_logging():
        date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        with open("bot.log", "a") as file:
            file.write(f"[start] [{date}]\n")

    def send_start_message(self, message): #—Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫—É –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
        return message.answer(self.start1, reply_markup=self.main_kb(message.from_user.id))

    def send_info_message(self, message): #—Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫—É –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è-—Å–ø—Ä–∞–≤–∫–∏
        return message.answer(self.info, parse_mode=types.ParseMode.MARKDOWN_V2)
    
    def send_m_count_message(self, message): #—Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –æ—Ç–ø—Ä–∞–≤–∫—É –±–æ—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        id_ = str(message['from'].id)
        m_count = self.cur.execute(f"SELECT m_count FROM users WHERE id = {id_}")
        m_count = [i for i in [g for g in m_count][0]][0]
        m_count_difference = 2 - m_count
        if m_count_difference != 0:
            return message.answer(f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É, —É –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {m_count_difference} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        else: 
            return message.answer(self.last_message, parse_mode=types.ParseMode.MARKDOWN_V2)

    def check_b_status(self, message): #—Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–æ–º –∏–ª–∏ –Ω–µ—Ç
        id_ = str(message['from'].id)
        select = self.cur.execute(f"SELECT b_status FROM users WHERE id = {id_}")
        try:
            result = [i for i in [g for g in select][0]][0]
            if result == "BAN":
                return True
        except:
            return False
        

    def is_new_user(self, message): #—Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è—é—â–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–µ –Ω–æ–≤—ã–π –∏–ª–∏ –Ω–µ—Ç
        id_ = str(message['from'].id) 
        select = self.cur.execute(f"SELECT id FROM users WHERE id = {id_}")
        result = [i for i in select]
        if result == []:
            return True
        else:
            return False

    def add_new_user(self, message): #—Ñ—É–Ω–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è—é—â–∞—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        username = message['from'].username
        id_ = str(message['from'].id)
        m_count = 0
        self.cur.execute("INSERT INTO users (username, id, m_count) VALUES (?, ?, ?)", (username, id_, m_count))
        self.db.commit()
    
    def add_m_count_user(self, message): #—Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è—é—â–∞—è –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–æ–º
        id_ = str(message['from'].id)
        m_count = self.cur.execute(f"SELECT m_count FROM users WHERE id = {id_}")
        m_count = [i for i in [g for g in m_count][0]][0]
        m_count += 1
        self.cur.execute("UPDATE users SET m_count = ? WHERE id = ?", (m_count, id_))
        if m_count == 3:
            self.cur.execute("UPDATE users SET b_status = ? WHERE id = ?", ('BAN', id_))
        self.db.commit()

    def check_track_in_db(self, message): #—Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä—è—é—â–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ—Ç
        url = message.text
        select = self.cur.execute("SELECT url FROM tracks WHERE url = ?", (url,))
        result = [i for i in select]
        if result == []:
            return True
        else:
            return False
        
        
    def add_new_track_in_db(self, data, message): #—Ñ—É–Ω–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è—é—â–∞—è –Ω–æ–≤—ã–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        track_name = data['name']
        author = data['author']
        self.cur.execute("INSERT INTO tracks (name, author, v_count, url) VALUES (?, ?, ?, ?)", (track_name, author, 1, message.text))
        self.db.commit()

    def add_existing_track_in_db(self, message): #—Ñ—É–Ω–∫—Ü–∏—è, –¥–æ–±–∞–≤–ª—è—é—â–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫ (–æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
        url = message.text
        v_count = self.cur.execute("SELECT v_count FROM tracks WHERE url = ?", (url,))
        v_count = [i for i in [g for g in v_count][0]][0]
        v_count += 1
        self.cur.execute("UPDATE tracks SET v_count = ? WHERE url = ?", (v_count, url))
        self.db.commit()
    

#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø—Ä–æ—Å—Ç–æ
#–≤—ã–∑–æ–≤ –Ω—É–∂–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–π, –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ –∫–ª–∞—Å—Å–µ
try:
    bot = MusicBot()
    bot.start_logging()
    bot.start()
    bot.info_()
    bot.get_message()
finally:
    bot.end()


